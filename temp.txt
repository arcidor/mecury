function installation_sysctl_update {
	# Make a backup of the source list	
	cp /etc/{sysctl.conf,sysctl.conf.backup}
	
	# Enable spoof protection
	sed -i 's/^#net.ipv4.conf.default.rp_filter=1/net.ipv4.conf.default.rp_filter=1/' /etc/sysctl.conf
	sed -i 's/^#net.ipv4.conf.all.rp_filter=1/net.ipv4.conf.all.rp_filter=1/' /etc/sysctl.conf
	
	# Enable TCP/IP SYN cookies
	sed -i 's/^#net.ipv4.tcp_syncookies=1/net.ipv4.tcp_syncookies=1/' /etc/sysctl.conf
	
	# Disable forwarding
	sed -i 's/^#net.ipv4.ip_forward=1/net.ipv4.ip_forward=0/' /etc/sysctl.conf
	sed -i 's/^#net.ipv6.conf.all.forwarding=1/#net.ipv6.conf.all.forwarding=0/' /etc/sysctl.conf
	
	# Prevent man in the middle attacks
	sed -i 's/^#net.ipv4.conf.all.accept_redirects = 0/net.ipv4.conf.all.accept_redirects = 0/' /etc/sysctl.conf	
	sed -i 's/^#net.ipv6.conf.all.accept_redirects = 0/net.ipv6.conf.all.accept_redirects = 0/' /etc/sysctl.conf	
	
	sed -i 's/^# net.ipv4.conf.all.secure_redirects = 1/net.ipv4.conf.all.secure_redirects = 0/' /etc/sysctl.conf
	sed -i 's/^#net.ipv4.conf.all.send_redirects = 0/net.ipv4.conf.all.send_redirects = 0/' /etc/sysctl.conf	

	sed -i 's/^#net.ipv4.conf.all.accept_source_route = 0/net.ipv4.conf.all.accept_source_route = 0/' /etc/sysctl.conf
	sed -i 's/^#net.ipv6.conf.all.accept_source_route = 0/net.ipv6.conf.all.accept_source_route = 0/' /etc/sysctl.conf
	
	# Log various suspicious packets	
	sed -i 's/^#net.ipv4.conf.all.log_martians = 1/net.ipv4.conf.all.log_martians = 1/' /etc/sysctl.conf

	cat >> /etc/sysctl.conf <<EOF

net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_messages = 1
EOF
	
	# Load the changes
	sysctl -p
}














########################################
# Logwatch
########################################

function logwatch_install {
	# Install logwatch
	aptitude -y install logwatch
	
	# Create a cron job that outputs the result of logwatch
	echo "30 3 * * * (logwatch | mail -s \"Logwatch Output\" $setting_admin_email)" >> $setting_cron_file
}

########################################
# Fail2Ban
########################################

function fail2ban_install {
	# Install fail2ban
	aptitude -y install fail2ban

	# Make a copy of the configuration file
	sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
	
	# Make changes to the setting file
	sed -i 's/^destemail.*/destemail = $setting_admin_email Prod/' /etc/fail2ban/jail.conf
	sed -i 's/^mta.*/mta = mail/' /etc/fail2ban/jail.conf
	
	service fail2ban restart
}

########################################
# Logcheck
########################################

function security_install_logcheck {
	aptitude -y install logcheck logcheck-database
}

########################################
# Denyhosts
########################################

function security_install_denyhosts {
	# Install denyhosts
	aptitude -y install denyhosts
}

########################################
# Misc
########################################

# Mail the relevant account when someone logs into the root account
function security_alert_root {
	cat > /root/.bashrc <<EOF
	echo 'ALERT - Root Shell Access on:' `date` `who` | mail -s "Alert: Root Login from `who | awk '{print $6}'`" $setting_admin_email 
EOF
}


################################################################################
# 9. Monitoring
################################################################################

########################################
# 9.1 Nagios
########################################

# Place holder

########################################
# 9.2 Munin
########################################

# Place holder

################################################################################
# 10. Web Servers
################################################################################

########################################
# 10.1 Apache Web Server
########################################

function apache_install {
	# Check for any updated packages and install apache2
	aptitude -y update
	aptitude -y install apache2 apache2-doc apache2-utils ssl libapache2-mod-security
}

function apache_configure {
	# Edit apache2.conf
	cp /etc/apache2/{apache2.conf,apache2.conf.backup}
	sed -i "s/^Timeout.*$/Timeout 30/" /etc/apache2/apache2.conf
	sed -i "s/^KeepAliveTimeout.*$/KeepAliveTimeout 5/g" /etc/apache2/apache2.conf
	sed -i "s/\(^\s*StartServers\)\s*[0-9]*/\1         1/" /etc/apache2/apache2.conf
	sed -i "s/\(^\s*MaxClients\)\s*[0-9]*/\1           45/" /etc/apache2/apache2.conf
	sed -i "s/\(^\s*MinSpareThreads\)\s*[0-9]*/\1      2/" /etc/apache2/apache2.conf
	sed -i "s/\(^\s*MaxSpareThreads\)\s*[0-9]*/\1      5/" /etc/apache2/apache2.conf
	sed -i "s/\(^\s*ThreadLimit\)\s*[0-9]*/\1          15/" /etc/apache2/apache2.conf
	sed -i "s/\(^\s*ThreadsPerChild\)\s*[0-9]*/\1      15/" /etc/apache2/apache2.conf
	sed -i "s/\(^\s*MaxRequestsPerChild\)\s*[0-9]*/\1  5000/" /etc/apache2/apache2.conf
	sed -i "s/\(^\s*//MaxKeepAliveRequests\)\s*[0-9]*/\1  400/" /etc/apache2/apache2.conf
	
	# Replace the server name
	sed -i "s/^ServerName.*/ServerName $setting_domain/" /etc/apache2/conf.d/servername.conf

	# Remove Apache server information from headers. 
	sed -i "s/^ServerTokens.*/ServerTokens Prod/" /etc/apache2/conf.d/security
	sed -i "s/^ServerSignature.*/ServerSignature Off/" /etc/apache2/conf.d/security

	# Enable apache modules
	a2enmod actions > $directory_logs/server_apache_settingure_actions.log
	a2enmod ssl > $directory_logs/server_apache_settingure_ssl.log
	a2enmod rewrite > $directory_logs/server_apache_settingure_rewrite.log
	a2enmod suexec
	a2enmod include
		
	# Disable apache modules
	a2dismod php4
	a2dismod status > $directory_logs/server_apache_install.log
	a2dismod autoindex > $directory_logs/server_apache_install.log
	a2dismod cgi

	# Edit Ports.conf
	sed -i "s/^NameVirtualHost.*/NameVirtualHost $setting_ip:80/" /etc/apache2/ports.conf
	
	# Edit default virtual host
	sed -i "s/^<VirtualHost.*/<VirtualHost $setting_ip:80>/" /etc/apache2/sites-available/default

	# Disable default site
	a2dissite 000-default


	# Create server encryption keys
	openssl genrsa -des3 -out server.key 1024
	
	# Create certificate request
	openssl req -new -key server.key -out server.csr
	
	# Create self-signed signature
	openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
	
	# Install the certificate and key
	cp server.crt /etc/ssl/certs/ 
	cp server.key /etc/ssl/private/
	
	# /etc/apache2/sites-available/default-ssl
	
	# uncomment the SSLOptions line
	# SSLEngine on
	# SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
	# SSLCertificateFile /etc/ssl/certs/server.crt
	# SSLCertificateKeyFile /etc/ssl/private/server.key
	
	# a2ensite default-ssl
}

function apache_restart {
	service apache2 restart
}

########################################
# 10.2 PHP5 - Scripting Language
########################################

function php_install {
	# Check for any updated packages and install php
	aptitude -y update
	aptitude -y install php5 php5-json php5-cli php5-mysql php5-dev php5-curl php5-gd php5-imagick php5-mcrypt php5-memcache php5-mhash php5-pspell php5-snmp php5-sqlite php5-xmlrpc php5-xsl libapache2-mod-php5 php5-gd php5-ldap php5-odbc php5-pgsql
}

function php_configure {
	# Install PHP
	aptitude -y install libapache2-mod-php5 php5 php5-common php5-curl php5-dev php5-gd php5-imagick php5-mcrypt php5-memcache php5-mhash php5-mysql php5-pspell php5-snmp php5-sqlite php5-xmlrpc php5-xsl php5-cli php5-suhosin > $directory_logs/server_php_install.log
	
	# Edit php.ini
	sed -i "s/^disable_functions.*$/disable_functions = php_uname, getmyuid, getmypid, passthru, leak, listen, diskfreespace, tmpfile, link, ignore_user_abord, shell_exec, dl, set_time_limit, exec, system, highlight_file, source, show_source, fpaththru, virtual, posix_ctermid, posix_getcwd, posix_getegid, posix_geteuid, posix_getgid, posix_getgrgid, posix_getgrnam, posix_getgroups, posix_getlogin, posix_getpgid, posix_getpgrp, posix_getpid, posix, _getppid, posix_getpwnam, posix_getpwuid, posix_getrlimit, posix_getsid, posix_getuid, posix_isatty, posix_kill, posix_mkfifo, posix_setegid, posix_seteuid, posix_setgid, posix_setpgid, posix_setsid, posix_setuid, posix_times, posix_ttyname, posix_uname, proc_open, proc_close, proc_get_status, proc_nice, proc_terminate, phpinfo/" /etc/php5/apache2/php.ini
	sed -i "s/^display_errors.*$/display_errors = Off/" /etc/php5/apache2/php.ini
	sed -i "s/^expose_php.*$/expose_php = Off/" /etc/php5/apache2/php.ini
	sed -i "s/^log_errors.*$/log_errors = On/" /etc/php5/apache2/php.ini
	sed -i "s/^memory_limit.*$/memory_limit = $setting_mysql_memory_limit/" /etc/php5/apache2/php.ini
	sed -i "s/^;error_log.*$/error_log = \/var\/log\/php.log/" /etc/php5/apache2/php.ini
	
	# Tweak php.ini. 
	phpinidir="/etc/php5/cgi/php.ini" 
	sed -i 's/^\(max_execution_time = \)[0-9]*/\1120/' $phpinidir 
	sed -i 's/^\(max_input_time = \)[0-9]*/\1300/' $phpinidir 
	sed -i 's/^\(memory_limit = \)[0-9]*M/\164M/' $phpinidir 
	sed -i 's/^\(post_max_size = \)[0-9]*M/\125M/' $phpinidir 
	sed -i 's/^\(upload_max_filesize = \)[0-9]*M/\125M/' $phpinidir 
	sed -i 's/disable_functions =/disable_functions = exec,system,passthru,shell_exec,escapeshellarg,escapeshellcmd,proc_close,proc_open,dl,popen,show_source/' $phpinidir 
	
	
	# register_globals = Off
	# allow_url_fopen = Off
	# enable_dl = Off
	# expose_PHP = Off
	# disable_functions = show_source, system, shell_exec, passthru, exec, phpinfo, popen, proc_open
	#	
}

########################################
# 10.3 Squid - Proxy Server
########################################

# Placeholder

########################################
# 10.4 Ruby on Rails
########################################

function ruby_on_rails_install {
	# Check for any updated packages and install rails
	aptitude -y update
	aptitude -y install rails
}

########################################
# 10.5 Apache Tomcat
########################################

function tomcat_install {
	
	# Check for any updated packages and install tomcat
	aptitude -y update
	aptitude -y install tomcat6
	
}

########################################
# 10.6 GlassFish
########################################

function server_glassfish_install {

	echo "sun-java6-jdk shared/accepted-sun-dlj-v1-1 select true" | /usr/bin/debconf-set-selections
	echo "sun-java6-jre shared/accepted-sun-dlj-v1-1 select true" | /usr/bin/debconf-set-selections
	
	aptitude -y install sun-java6-jdk sun-java6-jre > $directory_logs/server_glassfish_install.log

	echo "JAVA_HOME=\"/usr/lib/jvm/java-6-sun\"" > /etc/environment
	echo "PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/lib/jvm/java-6-sun/bin" >> /etc/environment

}

################################################################################
# 11. Databases
################################################################################

########################################
# 11.1 MySQL
########################################

function mysql_install {

	# Set the password for the MySQL installation
	echo "mysql-server-5.1 mysql-server/root_password password $setting_mysql_root_password" | debconf-set-selections
	echo "mysql-server-5.1 mysql-server/root_password_again password $setting_mysql_root_password" | debconf-set-selections
	
	# Check for any updated packages and install mysql
	aptitude -y update
	aptitude -y install mysql-server

	# Set the root password for the installation
	mysqladmin -u root password $setting_mysql_password
	mysqladmin -u root -h localhost password $setting_mysql_password -p$setting_mysql_password

}

function mysql_configure {
	
	#!!!! EDIT /etc/mysql/my.cnf 
	
	# Secure MySQL
	mysql_secure_installation
			
}

function mysql_restart {
	
	service mysql restart
	
}

function mysql_enable_external_access {
	# Uncomment the bind address property to allow external access to the database
	sed -i "s/^#bind-address.*$/bind-address/" /etc/mysql/my.cnf
}

function mysql_enable_innodb {
	sed -i 's/[mysqld]/[mysqld]\ndefault-storage-engine=InnoDB/' /etc/mysql/my.cnf
}

########################################
# 11.2 PostgreSQL
########################################

function postgresql_install {

	# Check for any updated packages and install postgresql
	aptitude -y update
	aptitude -y install postgresql postgresql-contrib
	
	# Set the password for the default postgres user
	passwd postgres $setting_postgres_password
	
	# Alter the password for the postgres user within the database
	psql -d template1 -c "ALTER USER postgres WITH PASSWORD '$setting_postgres_password';"
	
}

################################################################################
# 12. LAMP Applications
################################################################################

########################################
# Moin Moin
########################################

# Place holder

########################################
# MediaWiki
########################################

# Place holder

########################################
# phpMyAdmin
########################################

# Place holder

################################################################################
# 13. File Servers
################################################################################

########################################
# FTP Server
########################################

# Notice: FTP communication has been widely accepted as an insecure protocol.
# This script will not make use of FTP, instead users should consider a 
# combination of SSH/SFTP.

########################################
# Network File System
########################################

# Placeholder

########################################
# CUPS - Print Server
########################################

function cups_install {
	
	# Check for any updated packages and install cups
	aptitude -y update
	aptitude -y install cups
	
}

################################################################################
# 14. Email Services
################################################################################

########################################
# Postfix
########################################

function postfix_install_send_only {

	# Install postfix
	echo "postfix postfix/main_mailer_type select Internet Site" | debconf-set-selections
	echo "postfix postfix/mailname string $setting_domain" | debconf-set-selections
	echo "postfix postfix/destinations string localhost.localdomain, localhost" | debconf-set-selections
	aptitude -y install postfix telnet mailutils

	/usr/sbin/postconf -e "inet_interfaces = loopback-only"
	/usr/sbin/postconf -e "local_transport = error:local delivery is disabled"

	# Configure the hostname
	sed -i "s/^myhostname .*$/myhostname = $setting_domain/" /etc/postfix/main.cf

	# Put the domain the mail name
	cat > /etc/mailname << EOF
	$setting_domain
EOF
	
	
	# Ensure postfix will start at boot
	/usr/sbin/update-rc.d postfix defaults

	# Restart to apply changes
	/etc/init.d/postfix start
	
}

########################################
# Exim4
########################################

# Placeholder

########################################
# Dovecot Server
########################################

# Placeholder

########################################
# Mailman
########################################

# Placeholder

########################################
# Mail Filtering
########################################

# Placeholder

################################################################################
# 15. Chat Applications
################################################################################

########################################
# IRC Server
########################################

# Placeholder

########################################
# Jabber Instant Messaging Server
########################################

# Placeholder

################################################################################
# 16. Version Control System
################################################################################

########################################
# Git
########################################

function git_install {
	util_aptitude -y install git-core git-svn
}

########################################
# Bazaar
########################################

# Placeholder

########################################
# Subversion
########################################

# Placeholder

########################################
# CVS Server
########################################

# Placeholder

################################################################################
# 17. Windows Networking
################################################################################

########################################
# Samba File Server
########################################

# Place holder

########################################
# Samba Print Server
########################################

# Place holder

########################################
# Samba Domain Controller
########################################

# Place holder

########################################
# Samba Active Directory Integration
########################################

# Place holder

################################################################################
# 18. Backups
################################################################################

function backup_install {
	
	cat >> $setting_cron_file <<EOF
	#!/bin/sh
	####################################
	#
	# Backup to NFS mount script.
	#
	####################################

	# What to backup. 
	backup_files="/home /var/spool/mail /etc /root /boot /opt"

	# Where to backup to.
	dest="/mnt/backup"

	# Create archive filename.
	day=$(date +%A)
	hostname=$(hostname -s)
	archive_file="$hostname-$day.tgz"

	# Print start status message.
	echo "Backing up $backup_files to $dest/$archive_file"
	date
	echo

	# Backup the files using tar.
	tar czf $dest/$archive_file $backup_files

	# Print end status message.
	echo
	echo "Backup finished"
	date

	# Long listing of files in $dest to check file sizes.
	ls -lh $dest
EOF


	# Echo this to a cron file
	#cat "0 0 * * * bash /usr/local/bin/backup.sh" >>
	
}

################################################################################
# 19. Virtualization
################################################################################

########################################
# libvirt
########################################

# Place holder

########################################
# JeOS and vmbuilder
########################################

# Place holder

########################################
# UEC
########################################

# Place holder

################################################################################
# 20. Clustering
################################################################################

########################################
# DRBD
########################################

# Place holder

################################################################################
# 21. VPN
################################################################################

########################################
# OpenVPN
########################################

# Place holder

################################################################################
# 22. Other Useful Applications
################################################################################

function application_install_ntp {
	aptitude -y install ntp
}

################################################################################
# A1. Misc
################################################################################

# Delete unused users
function cleanup_unused_users {

	# Remove uneeded applications
	aptitude -y purge nano vsftpd lpr nfs-common portmap pidentd pcmcia-cs pppoe pppoeconf ppp pppconfig telnet-server telnet rsh-server rsh ypserv tftp-server talk-server talk
	
	
	# Enusre permissions are correct
	chown root:root /etc/passwd /etc/shadow /etc/group /etc/gshadow
	chmod 644 /etc/passwd /etc/group
	chmod 400 /etc/shadow /etc/gshadow

}